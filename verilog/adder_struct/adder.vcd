$date
	Sun Jul 02 02:33:20 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module adder_test $end
$var wire 4 ! result [3:0] $end
$var wire 1 " carry $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$scope module dut $end
$var wire 4 % a [3:0] $end
$var wire 4 & b [3:0] $end
$var wire 3 ' cout [2:0] $end
$var wire 4 ( result [3:0] $end
$var wire 1 " carry $end
$scope module f0 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 + cout $end
$var wire 1 , s $end
$upscope $end
$scope module f1 $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 / cout $end
$var wire 1 0 s $end
$upscope $end
$scope module f2 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 cout $end
$var wire 1 4 s $end
$upscope $end
$scope module f3 $end
$var wire 1 5 a $end
$var wire 1 6 b $end
$var wire 1 " cout $end
$var wire 1 7 s $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
07
06
05
04
03
02
01
10
0/
1.
0-
1,
0+
0*
1)
b11 (
b0 '
b10 &
b1 %
b10 $
b1 #
0"
b11 !
$end
#10
b111 !
b111 (
14
0.
12
1-
b100 $
b100 &
b11 #
b11 %
#20
